AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cost Monitor - ECS Fargate Deployment'

Parameters:
  ImageUri:
    Type: String
    Description: ECR repository URI for the Docker image

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for deployment

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for ECS tasks (at least 2)

  CertificateArn:
    Type: String
    Description: ACM certificate ARN for HTTPS (optional)
    Default: ''

  DomainName:
    Type: String
    Description: Domain name for the application (optional)
    Default: ''

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  HasDomain: !Not [!Equals [!Ref DomainName, '']]

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: aws-cost-monitor
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Application
          Value: AWSCostMonitor

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCostMonitorTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Task Role (with Cost Explorer permissions)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCostMonitorTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CostMonitorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ce:GetCostAndUsage
                  - ce:GetCostAndUsageWithResources
                  - ce:GetCostForecast
                  - ce:GetDimensionValues
                  - organizations:ListAccounts
                  - organizations:DescribeOrganization
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:GetMetricData
                  - cloudwatch:ListMetrics
                  - tag:GetResources
                  - tag:GetTagKeys
                  - tag:GetTagValues
                  - ec2:DescribeInstances
                  - lambda:ListFunctions
                  - rds:DescribeDBInstances
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - s3:GetBucketTagging
                Resource: '*'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/aws-cost-monitor
      RetentionInDays: 30

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: aws-cost-monitor
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: aws-cost-monitor
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8501
              Protocol: tcp
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: COST_ANOMALY_THRESHOLD
              Value: '20'
            - Name: DATA_REFRESH_INTERVAL
              Value: '300'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8501/_stcore/health || exit 1
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aws-cost-monitor-sg
      GroupDescription: Security group for AWS Cost Monitor
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: AWSCostMonitor

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aws-cost-monitor-alb-sg
      GroupDescription: Security group for AWS Cost Monitor ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: AWSCostMonitor

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: aws-cost-monitor-alb
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Application
          Value: AWSCostMonitor

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: aws-cost-monitor-tg
      Port: 8501
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /_stcore/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Application
          Value: AWSCostMonitor

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If
          - HasCertificate
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: '443'
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref TargetGroup

  # HTTPS Listener (conditional)
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPListener
    Properties:
      ServiceName: aws-cost-monitor-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - ContainerName: aws-cost-monitor
          ContainerPort: 8501
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Application
          Value: AWSCostMonitor

  # Auto Scaling Target
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 0  # Can scale to 0 for cost savings
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - CPU
  ScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: aws-cost-monitor-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  # Lambda Function for Start/Stop
  StartStopFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aws-cost-monitor-start-stop
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt StartStopLambdaRole.Arn
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ECSCluster
          SERVICE_NAME: !GetAtt ECSService.Name
      Code:
        ZipFile: |
          import boto3
          import os

          ecs = boto3.client('ecs')

          def handler(event, context):
              cluster = os.environ['CLUSTER_NAME']
              service = os.environ['SERVICE_NAME']
              action = event.get('action', 'status')

              if action == 'start':
                  response = ecs.update_service(
                      cluster=cluster,
                      service=service,
                      desiredCount=1
                  )
                  return {'status': 'started'}
              elif action == 'stop':
                  response = ecs.update_service(
                      cluster=cluster,
                      service=service,
                      desiredCount=0
                  )
                  return {'status': 'stopped'}
              else:
                  response = ecs.describe_services(
                      cluster=cluster,
                      services=[service]
                  )
                  return {
                      'status': 'running' if response['services'][0]['desiredCount'] > 0 else 'stopped',
                      'desiredCount': response['services'][0]['desiredCount'],
                      'runningCount': response['services'][0]['runningCount']
                  }

  # Lambda Execution Role
  StartStopLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSUpdateService
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: '*'

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  StartCommand:
    Description: AWS CLI command to start the service
    Value: !Sub 'aws ecs update-service --cluster ${ECSCluster} --service ${ECSService.Name} --desired-count 1'

  StopCommand:
    Description: AWS CLI command to stop the service
    Value: !Sub 'aws ecs update-service --cluster ${ECSCluster} --service ${ECSService.Name} --desired-count 0'

  StartStopFunctionArn:
    Description: ARN of the Lambda function for start/stop operations
    Value: !GetAtt StartStopFunction.Arn